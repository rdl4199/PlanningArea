name: ci-cd
on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Web checks
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      - name: Web install, lint, test, build
        working-directory: web
        run: |
          npm ci
          npm run lint --if-present
          npm test --if-present -- --ci
          npm run build

      # API checks
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore, build, test API
        run: |
          dotnet restore api
          dotnet build api -c Release --no-restore
          dotnet test api -c Release --no-build --logger trx

  codeql:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: csharp, javascript
      - uses: github/codeql-action/analyze@v3

  preview_web:
    runs-on: ubuntu-latest
    needs: checks
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_SWA_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "web"
          output_location: "dist" # use build for CRA
          skip_app_build: false

  deploy_api_dev:
    runs-on: ubuntu-latest
    needs: checks
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }
      - name: Publish API
        run: dotnet publish api -c Release -o publish
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: publish

  e2e_smoke:
    runs-on: ubuntu-latest
    needs: [deploy_api_dev]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '18' }
      - name: Install Playwright
        run: |
          cd web
          npm ci
          npx playwright install --with-deps
      - name: Run smoke tests
        env:
          BASE_URL: ${{ secrets.DEV_WEB_URL }}   # e.g., your Static Web App main URL
          API_URL: ${{ secrets.DEV_API_URL }}    # e.g., your App Service URL
        run: |
          cd web
          npm run test:e2e -- --reporter=line
